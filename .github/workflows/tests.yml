name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    env:
      CUDA_VISIBLE_DEVICES: ""
      PYTHONWARNINGS: "ignore::UserWarning"
      # Force PyTorch to use CPU only
      FORCE_CUDA: "0"
      USE_CUDA: "0"
      PYTORCH_ENABLE_MPS_FALLBACK: "1"
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        
    - name: Create minimal environment settings
      run: |
        # Create a file to suppress CUDA loading in PyTorch entirely
        echo "import os; os.environ['CUDA_VISIBLE_DEVICES']=''; os.environ['USE_CUDA']='0'; os.environ['FORCE_CUDA']='0'" > $HOME/disable_cuda.py
        export PYTHONPATH=$HOME:$PYTHONPATH
        
    - name: Install dependencies
      run: |
        # Install CPU-only version of PyTorch with specific version
        python -m pip install --no-cache-dir torch==2.0.1+cpu torchvision==0.15.2+cpu --index-url https://download.pytorch.org/whl/cpu
        # Check that we have CPU-only PyTorch
        PYTHONPATH=$HOME python -c "import disable_cuda; import torch; print('CUDA available:', torch.cuda.is_available())"
        # Disable virtualenv creation to avoid environment issues
        poetry config virtualenvs.create false
        poetry install
        
    - name: Lint with flake8
      continue-on-error: true  # Make this step optional
      run: |
        poetry run flake8 pneumonia_classifier scripts tests
        
    - name: Type check with mypy
      run: |
        poetry run mypy pneumonia_classifier scripts tests
        
    - name: Test with pytest
      run: |
        # Run tests with PYTHONPATH that includes our CUDA disabling module
        PYTHONPATH=$HOME:$PYTHONPATH poetry run pytest tests 