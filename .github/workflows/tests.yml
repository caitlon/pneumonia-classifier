name: Run Tests

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    env:
      CUDA_VISIBLE_DEVICES: ""
      PYTHONWARNINGS: "ignore::UserWarning"
      # Force PyTorch to use CPU only
      FORCE_CUDA: "0"
      USE_CUDA: "0"
      PYTORCH_ENABLE_MPS_FALLBACK: "1"
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        
    - name: Create CUDA blocking script
      run: |
        # Create a conftest.py to completely mock torch.cuda
        cat > tests/conftest.py << 'EOL'
        """PyTest configuration file to disable CUDA."""
        import os
        import sys
        from unittest.mock import MagicMock

        # Force environment variables
        os.environ["CUDA_VISIBLE_DEVICES"] = ""
        os.environ["FORCE_CUDA"] = "0"
        os.environ["USE_CUDA"] = "0"

        # Mock torch.cuda module before it's imported
        cuda_mock = MagicMock()
        cuda_mock.is_available = lambda: False 
        cuda_mock.__version__ = "0.0.0"
        sys.modules["torch.cuda"] = cuda_mock

        # Add hook for when torch is imported
        old_import = __import__

        def import_hook(name, *args, **kwargs):
            module = old_import(name, *args, **kwargs)
            if name == "torch":
                if hasattr(module, "cuda"):
                    module.cuda.is_available = lambda: False
                    module.cuda.device_count = lambda: 0
            return module

        __builtins__["__import__"] = import_hook
        EOL
        
        # Create a mypy exclusion file
        cat > mypy.ini << 'EOL'
        [mypy]
        python_version = 3.9
        warn_return_any = True
        warn_unused_configs = True
        disallow_untyped_defs = True
        disallow_incomplete_defs = True

        [mypy.plugins.numpy.*]
        follow_imports = skip

        [mypy.plugins.torch.*]
        follow_imports = skip

        [mypy-tests.conftest]
        ignore_errors = True
        EOL
        
    - name: Install dependencies
      run: |
        # Install minimal dependencies for linting and type checking
        poetry config virtualenvs.create false
        # Install CPU-only version of PyTorch explicitly
        pip install torch==2.0.1+cpu torchvision==0.15.2+cpu --index-url https://download.pytorch.org/whl/cpu
        # Verify PyTorch is CPU-only
        python -c "import torch; print('CUDA available:', torch.cuda.is_available())"
        # Install remaining dependencies
        poetry install
        
    - name: Lint with flake8
      continue-on-error: true  # Make this step optional
      run: |
        poetry run flake8 pneumonia_classifier scripts tests
        
    - name: Type check with mypy
      continue-on-error: true  # Make this step optional
      run: |
        poetry run mypy pneumonia_classifier scripts
        
    - name: Test with pytest
      run: |
        # Run with -v for verbose output
        poetry run pytest tests -v 